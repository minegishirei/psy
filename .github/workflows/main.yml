# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Curl Api
        run: |
          TOKEN=${{ secrets.MY_PAT }}
          OWNER=${{ secrets.OWNER }}
          REPO="flamevalue_blog"
          curl \
            -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$OWNER/$REPO/dispatches \
            -d '{"event_type":"on-demand-test","client_payload":{"env": "dev"}}'
      - name: build image
        run: docker image build -t pythonconsole . 


      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44


      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
            if [[ $file == *".md" ]]
            then
              docker run -v ./:/blog -v ./code:/code  pythonconsole bash -c "python /code/workflows.py /blog/$file"
              echo $file" is ok"
            fi
          done


      - name: List file info
        run: |
          docker run -v ./:/blog -v ./code:/code pythonconsole bash -c "python /code/current_state.py " > current_state.txt
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      - name: run scrapy
        run: |
          echo test
          docker run -v ./data:/data -v ./code:/code pythonconsole bash -c "python /code/scrapy.py" 


      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Changed files
      
      - name: Tweet commit message
        run: |
          echo
        #  docker run -v ./:/blog -v ./code:/code pythonconsole bash -c "python /code/twitter_api.py ${{ github.event.head_commit.message }}"
